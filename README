Prompt: Develop a balances ledger

To run the application:
git clone to local machine, npm install, create postgres database called "ledger", npm run seed, npm run start

To run the tests:
npm run seed
npm run testAccount
exit out of terminal
npm run seed
npm run testTransactions

User Stories
1) As a user, I would like to open a balance account in one of the available currencies: USD, EUR, BRL, INR
  - completed
2) As a user, I would like to “top up” (add balance) to one of the balances available
  - completed
3) As a user with more than one balance account, I would like to transfer money from one balance to another, and convert if needed
  - completed
4) As a user I would like to see view all of the “top up” and currency conversion transactions I have completed (the ledger)
  - completed top up transactions

Requirements:

All data presented to the user should be saved in a database. There should be unit test coverage for as much of the application as you can (preferably focusing on the backend). Application setup should be carefully documented and tests should be easy to run. The API should be RESTful and thoughtfully constructed. The relational model that you come up with should be thoughtfully constructed.


Written Portion

One decision that I am proud of is the decision to represent an electronic money transfer (whether it requires a currency conversion or not) as two transactions: a combination of an incoming transaction and an outgoing transaction in a join table. When a user sends money from one account to another account, a post request is made from the front end (components/Transfer.js) to the incomingTransactions table, the outgoingTransactions table, and the transfers table (the join table). These post requests on the backend (api/transactions.js) update the account balances accordingly.

Initially, all electronic money transfers were contained within one Transactions table. This table was a self-referencing through table linking two accounts together. The columns included incomingAmount, outgoingAmount, incomingAccountId, outgoingAccountId, in which any of the columns were allowed to be null. This table accounted for deposits, withdrawals, transfers with conversions, and transfers without conversions. A deposit could be represented with an incomingAmount and incomingAccountId, with the other two fields being null. A money transfer between accounts would have all fields populated. I thought this would allow for a cleaner and more contained design that would simplify reading or writing to the database in the long run. However, I chose to split this one table into three tables (incoming, outgoing, and a join that denotes whether it requires a conversion or not) because it was more explicit, and because Sequelize creates foreign key constraints automatically and would not allow a null value as a foreign key. This is a case in which knowing raw SQL would have been useful, but ultimately having the schema be more explicit in three tables was preferable due to its more intuitive design.

Although this is a contained assignment, I made certain design choices with the intention of long-term sustainability. I worked to make my database design intuitive, and my code also took into account certain features that could be implemented in the future. For example, although I did not have to account for a user sending money to another user's account, I structured my code so that this could be incorporated in the future by hardcoding a user1 in place of req.body.userId in api/accounts.js.
